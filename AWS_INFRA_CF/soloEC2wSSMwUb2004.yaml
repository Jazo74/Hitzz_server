Parameters:

  AppName:
    Description: The short name of the application
    Type: String
    MinLength: '5'
    MaxLength: '15'
    Default: 'JZApp'
  VpcCIDR:
    Description: The IP address range of the VPC
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/26
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  SubnetCIDR:
    Description: The IP address range of the Subnet
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/28
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  InstanceType:
    Description: The type of type of the instance
    Type: String
    Default: 't2.micro'

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AppName}_VPC
  
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref SubnetCIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AppName}_Subnet
  
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AppName}_IGW

  AttachmentIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AppName}_RouteTable

  RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet

  HitzzRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachmentIGW
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-05f7491af5eef733a
      InstanceType: !Ref InstanceType
      SubnetId: !Ref Subnet
      SecurityGroupIds:
        - !GetAtt VPC.DefaultSecurityGroup
      IamInstanceProfile: !Ref ManagedInstanceProfile
      Tags : 
          - Key: "Name"
            Value: !Sub ${AppName}_Server

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable HTTP access via port 9000 without SSH access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        FromPort: '9000'
        IpProtocol: tcp
        ToPort: '9000'

  ManagedInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  ManagedInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref ManagedInstanceRole
      InstanceProfileName: ManagedInstanceProfile 

Outputs : 
  InstanceId : 
    Description: The Instance ID of the EC2 instance
    Value : !Ref WebServer
    
    